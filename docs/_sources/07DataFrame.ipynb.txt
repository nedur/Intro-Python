{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "31e1986c",
   "metadata": {},
   "source": [
    "# 7. Data Frames \n",
    "\n",
    "## 7.1. Definição\n",
    "\n",
    "Em síntese, um **data frame** consiste em uma tabela de dados capaz de armazenar diferentes classes de dados nas suas colunas. \n",
    "\n",
    "Para ver um exemplo de *data frame*, podemos usar os dados do livro **Introdução à Econometria: uma abordagem moderna** de autoria de Jeffrey M. Wooldridge.\n",
    "\n",
    "Para tal, precisamos instalar o pacote **wooldridge**. \n",
    "\n",
    "Uma forma de instalar é utilizando o **Jupyter Notebook** (ou o **Google Colaboratory**) e digitando o comando: \n",
    "\n",
    "    !pip install wooldridge\n",
    "\n",
    "Ou, com a plataforma **Anaconda** aberta, abra o prompt de comando, clicando no botão *Launch* em *CMD.exe Prompt*, como mostra a figura abaixo: \n",
    "\n",
    "![AnacondaNAVIGATOR_prompt](AnacondaNAVIGATOR_prompt.png)\n",
    "\n",
    "Abrirá uma janela, como abaixo: \n",
    "\n",
    "![Prompt_Anaconda](Prompt_Anaconda.png) \n",
    "\n",
    "Nessa janela utilize o comando: \n",
    "\n",
    "    pip install wooldridge\n",
    "\n",
    "<div class=\"alert alert-warning\"> \n",
    "    \n",
    "Oberve que na janela de comando não há o símbolo de exclamação no início! \n",
    "\n",
    "</div>\n",
    "\n",
    "Após digitar o comando, pressione `enter`. \n",
    "\n",
    "<div class=\"alert alert-info\"> \n",
    "    \n",
    "**Observação:**\n",
    "\n",
    "Mais informações sobre a instalação e o conteúdo desse pacote pode ser encontradas [aqui](https://pypi.org/project/wooldridge/).\n",
    "    \n",
    "</div>\n",
    "\n",
    "De volta ao **Jupyter Notebook**, para acessar o pacote, precisamos usar o seguinte comando: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a22e293c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import wooldridge as wd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "597e191d",
   "metadata": {},
   "source": [
    "O pacote contém vários dados. \n",
    "\n",
    "Como exemplo, faça leitura da base de dados **wage1** com a função `wd.data()`(observe que *wd* foi a sigla utilizada quando importamos os dados do pacote *wooldridge*):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "669df8ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "wage1 = wd.data('wage1')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ddd95f28",
   "metadata": {},
   "source": [
    "Para ver os dados: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d88289d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>wage</th>\n",
       "      <th>educ</th>\n",
       "      <th>exper</th>\n",
       "      <th>tenure</th>\n",
       "      <th>nonwhite</th>\n",
       "      <th>female</th>\n",
       "      <th>married</th>\n",
       "      <th>numdep</th>\n",
       "      <th>smsa</th>\n",
       "      <th>northcen</th>\n",
       "      <th>...</th>\n",
       "      <th>trcommpu</th>\n",
       "      <th>trade</th>\n",
       "      <th>services</th>\n",
       "      <th>profserv</th>\n",
       "      <th>profocc</th>\n",
       "      <th>clerocc</th>\n",
       "      <th>servocc</th>\n",
       "      <th>lwage</th>\n",
       "      <th>expersq</th>\n",
       "      <th>tenursq</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.10</td>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.131402</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.24</td>\n",
       "      <td>12</td>\n",
       "      <td>22</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.175573</td>\n",
       "      <td>484</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.00</td>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.098612</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6.00</td>\n",
       "      <td>8</td>\n",
       "      <td>44</td>\n",
       "      <td>28</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.791759</td>\n",
       "      <td>1936</td>\n",
       "      <td>784</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.30</td>\n",
       "      <td>12</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.667707</td>\n",
       "      <td>49</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>521</th>\n",
       "      <td>15.00</td>\n",
       "      <td>16</td>\n",
       "      <td>14</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.708050</td>\n",
       "      <td>196</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>522</th>\n",
       "      <td>2.27</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.819780</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>523</th>\n",
       "      <td>4.67</td>\n",
       "      <td>15</td>\n",
       "      <td>13</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.541159</td>\n",
       "      <td>169</td>\n",
       "      <td>324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>524</th>\n",
       "      <td>11.56</td>\n",
       "      <td>16</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.447551</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>525</th>\n",
       "      <td>3.50</td>\n",
       "      <td>14</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.252763</td>\n",
       "      <td>25</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>526 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      wage  educ  exper  tenure  nonwhite  female  married  numdep  smsa  \\\n",
       "0     3.10    11      2       0         0       1        0       2     1   \n",
       "1     3.24    12     22       2         0       1        1       3     1   \n",
       "2     3.00    11      2       0         0       0        0       2     0   \n",
       "3     6.00     8     44      28         0       0        1       0     1   \n",
       "4     5.30    12      7       2         0       0        1       1     0   \n",
       "..     ...   ...    ...     ...       ...     ...      ...     ...   ...   \n",
       "521  15.00    16     14       2         0       1        1       2     0   \n",
       "522   2.27    10      2       0         0       1        0       3     0   \n",
       "523   4.67    15     13      18         0       0        1       3     0   \n",
       "524  11.56    16      5       1         0       0        1       0     0   \n",
       "525   3.50    14      5       4         1       1        0       2     0   \n",
       "\n",
       "     northcen  ...  trcommpu  trade  services  profserv  profocc  clerocc  \\\n",
       "0           0  ...         0      0         0         0        0        0   \n",
       "1           0  ...         0      0         1         0        0        0   \n",
       "2           0  ...         0      1         0         0        0        0   \n",
       "3           0  ...         0      0         0         0        0        1   \n",
       "4           0  ...         0      0         0         0        0        0   \n",
       "..        ...  ...       ...    ...       ...       ...      ...      ...   \n",
       "521         0  ...         0      0         0         1        1        0   \n",
       "522         0  ...         0      1         0         0        1        0   \n",
       "523         0  ...         0      0         0         0        1        0   \n",
       "524         0  ...         0      0         0         0        0        0   \n",
       "525         0  ...         0      0         0         1        0        1   \n",
       "\n",
       "     servocc     lwage  expersq  tenursq  \n",
       "0          0  1.131402        4        0  \n",
       "1          1  1.175573      484        4  \n",
       "2          0  1.098612        4        0  \n",
       "3          0  1.791759     1936      784  \n",
       "4          0  1.667707       49        4  \n",
       "..       ...       ...      ...      ...  \n",
       "521        0  2.708050      196        4  \n",
       "522        0  0.819780        4        0  \n",
       "523        0  1.541159      169      324  \n",
       "524        0  2.447551       25        1  \n",
       "525        0  1.252763       25       16  \n",
       "\n",
       "[526 rows x 24 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wage1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3288855",
   "metadata": {},
   "source": [
    "Observe que a primeira coluna indica o número da observação (esse número é chamado de índice - *index* - dos dados), e a primeira linha refere-se ao nome das variáveis. \n",
    "\n",
    "No total (contando a primeira linha e a primeira coluna), a base de dados conta com 526 linhas e 24 colunas. \n",
    "\n",
    "Alternativamente, podemos acessar essa informação com o atributo `shape`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8396261d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(526, 24)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wage1.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b03dbeb5",
   "metadata": {},
   "source": [
    "Para visualizar o tipo de dado, podemos utilizar a função `type()`: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5a25fea0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(wage1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "abe80be9",
   "metadata": {},
   "source": [
    "Para realizar algumas manipulações (transformações) e análises de dados, precisamos usar um pacote específico. \n",
    "\n",
    "O **Pandas** é um pacote Python que permite realizar tais manipulações e análises de dados. Se você está utilizando Anaconda, o pacote já está instalado na sua máquina. \n",
    "\n",
    "A saída acima, indica que você está usando um *Data Frame* desse pacote. \n",
    "\n",
    "Para sabermos mais informações sobre os dados, podemos utilizar a função `info()`: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "586718d9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 526 entries, 0 to 525\n",
      "Data columns (total 24 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   wage      526 non-null    float64\n",
      " 1   educ      526 non-null    int64  \n",
      " 2   exper     526 non-null    int64  \n",
      " 3   tenure    526 non-null    int64  \n",
      " 4   nonwhite  526 non-null    int64  \n",
      " 5   female    526 non-null    int64  \n",
      " 6   married   526 non-null    int64  \n",
      " 7   numdep    526 non-null    int64  \n",
      " 8   smsa      526 non-null    int64  \n",
      " 9   northcen  526 non-null    int64  \n",
      " 10  south     526 non-null    int64  \n",
      " 11  west      526 non-null    int64  \n",
      " 12  construc  526 non-null    int64  \n",
      " 13  ndurman   526 non-null    int64  \n",
      " 14  trcommpu  526 non-null    int64  \n",
      " 15  trade     526 non-null    int64  \n",
      " 16  services  526 non-null    int64  \n",
      " 17  profserv  526 non-null    int64  \n",
      " 18  profocc   526 non-null    int64  \n",
      " 19  clerocc   526 non-null    int64  \n",
      " 20  servocc   526 non-null    int64  \n",
      " 21  lwage     526 non-null    float64\n",
      " 22  expersq   526 non-null    int64  \n",
      " 23  tenursq   526 non-null    int64  \n",
      "dtypes: float64(2), int64(22)\n",
      "memory usage: 98.8 KB\n"
     ]
    }
   ],
   "source": [
    "wage1.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58c94244",
   "metadata": {},
   "source": [
    "A saída nos mostra todas as variáveis, a quantidadade de entradas não nulas e o tipo dos dados em cada coluna. \n",
    "\n",
    "Uma forma rápida de acessar informações descritivas (número de observações, média, desvio padrão, mínimo, quantis e máximo) sobre cada variável é o uso da função `describe()`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2893857f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>wage</th>\n",
       "      <th>educ</th>\n",
       "      <th>exper</th>\n",
       "      <th>tenure</th>\n",
       "      <th>nonwhite</th>\n",
       "      <th>female</th>\n",
       "      <th>married</th>\n",
       "      <th>numdep</th>\n",
       "      <th>smsa</th>\n",
       "      <th>northcen</th>\n",
       "      <th>...</th>\n",
       "      <th>trcommpu</th>\n",
       "      <th>trade</th>\n",
       "      <th>services</th>\n",
       "      <th>profserv</th>\n",
       "      <th>profocc</th>\n",
       "      <th>clerocc</th>\n",
       "      <th>servocc</th>\n",
       "      <th>lwage</th>\n",
       "      <th>expersq</th>\n",
       "      <th>tenursq</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>526.000000</td>\n",
       "      <td>526.000000</td>\n",
       "      <td>526.00000</td>\n",
       "      <td>526.000000</td>\n",
       "      <td>526.000000</td>\n",
       "      <td>526.000000</td>\n",
       "      <td>526.000000</td>\n",
       "      <td>526.000000</td>\n",
       "      <td>526.000000</td>\n",
       "      <td>526.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>526.000000</td>\n",
       "      <td>526.000000</td>\n",
       "      <td>526.000000</td>\n",
       "      <td>526.000000</td>\n",
       "      <td>526.000000</td>\n",
       "      <td>526.000000</td>\n",
       "      <td>526.000000</td>\n",
       "      <td>526.000000</td>\n",
       "      <td>526.000000</td>\n",
       "      <td>526.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5.896103</td>\n",
       "      <td>12.562738</td>\n",
       "      <td>17.01711</td>\n",
       "      <td>5.104563</td>\n",
       "      <td>0.102662</td>\n",
       "      <td>0.479087</td>\n",
       "      <td>0.608365</td>\n",
       "      <td>1.043726</td>\n",
       "      <td>0.722433</td>\n",
       "      <td>0.250951</td>\n",
       "      <td>...</td>\n",
       "      <td>0.043726</td>\n",
       "      <td>0.287072</td>\n",
       "      <td>0.100760</td>\n",
       "      <td>0.258555</td>\n",
       "      <td>0.366920</td>\n",
       "      <td>0.167300</td>\n",
       "      <td>0.140684</td>\n",
       "      <td>1.623268</td>\n",
       "      <td>473.435361</td>\n",
       "      <td>78.150190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.693086</td>\n",
       "      <td>2.769022</td>\n",
       "      <td>13.57216</td>\n",
       "      <td>7.224462</td>\n",
       "      <td>0.303805</td>\n",
       "      <td>0.500038</td>\n",
       "      <td>0.488580</td>\n",
       "      <td>1.261891</td>\n",
       "      <td>0.448225</td>\n",
       "      <td>0.433973</td>\n",
       "      <td>...</td>\n",
       "      <td>0.204680</td>\n",
       "      <td>0.452826</td>\n",
       "      <td>0.301298</td>\n",
       "      <td>0.438257</td>\n",
       "      <td>0.482423</td>\n",
       "      <td>0.373599</td>\n",
       "      <td>0.348027</td>\n",
       "      <td>0.531538</td>\n",
       "      <td>616.044772</td>\n",
       "      <td>199.434664</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.530000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-0.634878</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>3.330000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>5.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.202972</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>4.650000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>13.50000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.536867</td>\n",
       "      <td>182.500000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>6.880000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>26.00000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.928619</td>\n",
       "      <td>676.000000</td>\n",
       "      <td>49.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>24.980000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>51.00000</td>\n",
       "      <td>44.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.218076</td>\n",
       "      <td>2601.000000</td>\n",
       "      <td>1936.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             wage        educ      exper      tenure    nonwhite      female  \\\n",
       "count  526.000000  526.000000  526.00000  526.000000  526.000000  526.000000   \n",
       "mean     5.896103   12.562738   17.01711    5.104563    0.102662    0.479087   \n",
       "std      3.693086    2.769022   13.57216    7.224462    0.303805    0.500038   \n",
       "min      0.530000    0.000000    1.00000    0.000000    0.000000    0.000000   \n",
       "25%      3.330000   12.000000    5.00000    0.000000    0.000000    0.000000   \n",
       "50%      4.650000   12.000000   13.50000    2.000000    0.000000    0.000000   \n",
       "75%      6.880000   14.000000   26.00000    7.000000    0.000000    1.000000   \n",
       "max     24.980000   18.000000   51.00000   44.000000    1.000000    1.000000   \n",
       "\n",
       "          married      numdep        smsa    northcen  ...    trcommpu  \\\n",
       "count  526.000000  526.000000  526.000000  526.000000  ...  526.000000   \n",
       "mean     0.608365    1.043726    0.722433    0.250951  ...    0.043726   \n",
       "std      0.488580    1.261891    0.448225    0.433973  ...    0.204680   \n",
       "min      0.000000    0.000000    0.000000    0.000000  ...    0.000000   \n",
       "25%      0.000000    0.000000    0.000000    0.000000  ...    0.000000   \n",
       "50%      1.000000    1.000000    1.000000    0.000000  ...    0.000000   \n",
       "75%      1.000000    2.000000    1.000000    0.750000  ...    0.000000   \n",
       "max      1.000000    6.000000    1.000000    1.000000  ...    1.000000   \n",
       "\n",
       "            trade    services    profserv     profocc     clerocc     servocc  \\\n",
       "count  526.000000  526.000000  526.000000  526.000000  526.000000  526.000000   \n",
       "mean     0.287072    0.100760    0.258555    0.366920    0.167300    0.140684   \n",
       "std      0.452826    0.301298    0.438257    0.482423    0.373599    0.348027   \n",
       "min      0.000000    0.000000    0.000000    0.000000    0.000000    0.000000   \n",
       "25%      0.000000    0.000000    0.000000    0.000000    0.000000    0.000000   \n",
       "50%      0.000000    0.000000    0.000000    0.000000    0.000000    0.000000   \n",
       "75%      1.000000    0.000000    1.000000    1.000000    0.000000    0.000000   \n",
       "max      1.000000    1.000000    1.000000    1.000000    1.000000    1.000000   \n",
       "\n",
       "            lwage      expersq      tenursq  \n",
       "count  526.000000   526.000000   526.000000  \n",
       "mean     1.623268   473.435361    78.150190  \n",
       "std      0.531538   616.044772   199.434664  \n",
       "min     -0.634878     1.000000     0.000000  \n",
       "25%      1.202972    25.000000     0.000000  \n",
       "50%      1.536867   182.500000     4.000000  \n",
       "75%      1.928619   676.000000    49.000000  \n",
       "max      3.218076  2601.000000  1936.000000  \n",
       "\n",
       "[8 rows x 24 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wage1.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28b9bc32",
   "metadata": {},
   "source": [
    "## 7.2. Selecionando informações em um Data Frame\n",
    "\n",
    "Existem diversas formas para selecionar partes de um **Data Frame**.\n",
    "\n",
    "Por exemplo, para selecionar a segunda linha da terceira coluna da *data frame* **wage1**, podemos usar o método `iloc`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "64142dfc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "22"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wage1.iloc[1, 2]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96893f17",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-info\"> \n",
    "    \n",
    "**Observação:**\n",
    "    \n",
    "Um método se refere a uma função que é parte de uma classe. Nesse caso, `iloc` é um método que está ligado a objetos do tipo *Data Frame*. Uma função pode ser utilizada em qualquer instancia ou objeto de qualquer classe. Assim, todos os métodos são funções, mas nem todas funções são métodos. \n",
    "\n",
    "Fonte: [datacamp](https://www.datacamp.com/tutorial/functions-python-tutorial#functions-in-python)\n",
    "\n",
    "</div>\n",
    "\n",
    "Lembre-se que a indexação em Python começa em zero. Logo, a segunda linha tem índice 1, a terceira coluna tem índice 2, e assim por diante.\n",
    "\n",
    "De forma equivalente, podemos utilizar o nome da coluna, por meio do método `loc`: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0b326a1e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "22"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wage1.loc[1, 'exper']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63c1bd58",
   "metadata": {},
   "source": [
    "Para selecionar somente as colunas \"wage\" e \"educ\" pelo nome, podemos usar:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "fab59b2e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "wage     3.24\n",
       "educ    12.00\n",
       "Name: 1, dtype: float64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wage1.loc[1, ['wage', 'educ']]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5eb00b70",
   "metadata": {},
   "source": [
    "Podemos selecionar todas as informações de uma variável. Por exemplo, para selecionar apenas a variável *educ* do *data frame*, podemos usar a seguinte sintaxe:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c1f3f1af",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>educ</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>521</th>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>522</th>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>523</th>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>524</th>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>525</th>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>526 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     educ\n",
       "0      11\n",
       "1      12\n",
       "2      11\n",
       "3       8\n",
       "4      12\n",
       "..    ...\n",
       "521    16\n",
       "522    10\n",
       "523    15\n",
       "524    16\n",
       "525    14\n",
       "\n",
       "[526 rows x 1 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wage1[['educ']]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "800e0125",
   "metadata": {},
   "source": [
    "Observe que utilizamos colchetes duas vezes. Isso porque, estamos criando uma lista de colunas a serem selecionadas do banco de dados. O resultado é um subconjunto, que também possui o formato de data frame. Você pode selecionar quantas colunas desejar. \n",
    "\n",
    "Podemos utilizar algum critério lógico para selecionar as linhas. Por exemplo, suponha que você queira observar apenas pessoas com mais de 30 anos de experiência no trabalho. Nesse caso, você utilizar o seguinte comando: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d6237124",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>wage</th>\n",
       "      <th>educ</th>\n",
       "      <th>exper</th>\n",
       "      <th>tenure</th>\n",
       "      <th>nonwhite</th>\n",
       "      <th>female</th>\n",
       "      <th>married</th>\n",
       "      <th>numdep</th>\n",
       "      <th>smsa</th>\n",
       "      <th>northcen</th>\n",
       "      <th>...</th>\n",
       "      <th>trcommpu</th>\n",
       "      <th>trade</th>\n",
       "      <th>services</th>\n",
       "      <th>profserv</th>\n",
       "      <th>profocc</th>\n",
       "      <th>clerocc</th>\n",
       "      <th>servocc</th>\n",
       "      <th>lwage</th>\n",
       "      <th>expersq</th>\n",
       "      <th>tenursq</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>73</th>\n",
       "      <td>2.91</td>\n",
       "      <td>12</td>\n",
       "      <td>20</td>\n",
       "      <td>34</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.068153</td>\n",
       "      <td>400</td>\n",
       "      <td>1156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>91</th>\n",
       "      <td>11.76</td>\n",
       "      <td>14</td>\n",
       "      <td>40</td>\n",
       "      <td>39</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.464704</td>\n",
       "      <td>1600</td>\n",
       "      <td>1521</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>264</th>\n",
       "      <td>8.75</td>\n",
       "      <td>12</td>\n",
       "      <td>47</td>\n",
       "      <td>44</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.169054</td>\n",
       "      <td>2209</td>\n",
       "      <td>1936</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>306</th>\n",
       "      <td>6.25</td>\n",
       "      <td>11</td>\n",
       "      <td>35</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.832582</td>\n",
       "      <td>1225</td>\n",
       "      <td>961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>342</th>\n",
       "      <td>15.00</td>\n",
       "      <td>11</td>\n",
       "      <td>35</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.708050</td>\n",
       "      <td>1225</td>\n",
       "      <td>961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>457</th>\n",
       "      <td>6.50</td>\n",
       "      <td>14</td>\n",
       "      <td>41</td>\n",
       "      <td>33</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.871802</td>\n",
       "      <td>1681</td>\n",
       "      <td>1089</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      wage  educ  exper  tenure  nonwhite  female  married  numdep  smsa  \\\n",
       "73    2.91    12     20      34         0       1        1       2     1   \n",
       "91   11.76    14     40      39         0       0        1       0     1   \n",
       "264   8.75    12     47      44         0       0        1       0     0   \n",
       "306   6.25    11     35      31         0       0        1       0     1   \n",
       "342  15.00    11     35      31         0       0        1       0     0   \n",
       "457   6.50    14     41      33         0       0        1       0     1   \n",
       "\n",
       "     northcen  ...  trcommpu  trade  services  profserv  profocc  clerocc  \\\n",
       "73          0  ...         0      0         1         0        0        1   \n",
       "91          0  ...         1      0         0         0        1        0   \n",
       "264         0  ...         0      0         0         0        0        0   \n",
       "306         0  ...         0      1         0         0        0        0   \n",
       "342         0  ...         0      0         0         0        0        0   \n",
       "457         1  ...         0      1         0         0        1        0   \n",
       "\n",
       "     servocc     lwage  expersq  tenursq  \n",
       "73         0  1.068153      400     1156  \n",
       "91         0  2.464704     1600     1521  \n",
       "264        0  2.169054     2209     1936  \n",
       "306        0  1.832582     1225      961  \n",
       "342        0  2.708050     1225      961  \n",
       "457        0  1.871802     1681     1089  \n",
       "\n",
       "[6 rows x 24 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wage1[wage1[\"tenure\"]>30]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0d70181",
   "metadata": {},
   "source": [
    "Observe que esse comando tem duas partes. Dentro do colchete estamos utilizando um operador lógico que indicara *True* ou *False* em cada linha. Depois, estamos pedindo para selecionar apenas *True*. \n",
    "\n",
    "Para que fique mais claro, observe o que ocorre quando usamos apenas o comando que está dentro dos colchetes: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "dbb8c962",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      False\n",
       "1      False\n",
       "2      False\n",
       "3      False\n",
       "4      False\n",
       "       ...  \n",
       "521    False\n",
       "522    False\n",
       "523    False\n",
       "524    False\n",
       "525    False\n",
       "Name: tenure, Length: 526, dtype: bool"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wage1[\"tenure\"]>30"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30cf2b9e",
   "metadata": {},
   "source": [
    "Temos uma lista de booleanos, informando se para cada linha é válido que a experiência é maior do que 30. Ou seja, quando colocamos o comando completo (`wage1[wage1[\"tenure\"]>30]`) estamos selecionando as linhas do Data Frame **wage1** para as quais (`[wage1[\"tenure\"]>30]`) é verdadeiro. \n",
    "\n",
    "Outras três funções muito usadas em data frames são: `head()`(para visualizar as primeiras 5 linhas da base de dados) e `tail()` (para visualizar as últimas 5 linhas da base de dados)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6e8a94ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>wage</th>\n",
       "      <th>educ</th>\n",
       "      <th>exper</th>\n",
       "      <th>tenure</th>\n",
       "      <th>nonwhite</th>\n",
       "      <th>female</th>\n",
       "      <th>married</th>\n",
       "      <th>numdep</th>\n",
       "      <th>smsa</th>\n",
       "      <th>northcen</th>\n",
       "      <th>...</th>\n",
       "      <th>trcommpu</th>\n",
       "      <th>trade</th>\n",
       "      <th>services</th>\n",
       "      <th>profserv</th>\n",
       "      <th>profocc</th>\n",
       "      <th>clerocc</th>\n",
       "      <th>servocc</th>\n",
       "      <th>lwage</th>\n",
       "      <th>expersq</th>\n",
       "      <th>tenursq</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.10</td>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.131402</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.24</td>\n",
       "      <td>12</td>\n",
       "      <td>22</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.175573</td>\n",
       "      <td>484</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.00</td>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.098612</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6.00</td>\n",
       "      <td>8</td>\n",
       "      <td>44</td>\n",
       "      <td>28</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.791759</td>\n",
       "      <td>1936</td>\n",
       "      <td>784</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.30</td>\n",
       "      <td>12</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.667707</td>\n",
       "      <td>49</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   wage  educ  exper  tenure  nonwhite  female  married  numdep  smsa  \\\n",
       "0  3.10    11      2       0         0       1        0       2     1   \n",
       "1  3.24    12     22       2         0       1        1       3     1   \n",
       "2  3.00    11      2       0         0       0        0       2     0   \n",
       "3  6.00     8     44      28         0       0        1       0     1   \n",
       "4  5.30    12      7       2         0       0        1       1     0   \n",
       "\n",
       "   northcen  ...  trcommpu  trade  services  profserv  profocc  clerocc  \\\n",
       "0         0  ...         0      0         0         0        0        0   \n",
       "1         0  ...         0      0         1         0        0        0   \n",
       "2         0  ...         0      1         0         0        0        0   \n",
       "3         0  ...         0      0         0         0        0        1   \n",
       "4         0  ...         0      0         0         0        0        0   \n",
       "\n",
       "   servocc     lwage  expersq  tenursq  \n",
       "0        0  1.131402        4        0  \n",
       "1        1  1.175573      484        4  \n",
       "2        0  1.098612        4        0  \n",
       "3        0  1.791759     1936      784  \n",
       "4        0  1.667707       49        4  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wage1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cf342da0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>wage</th>\n",
       "      <th>educ</th>\n",
       "      <th>exper</th>\n",
       "      <th>tenure</th>\n",
       "      <th>nonwhite</th>\n",
       "      <th>female</th>\n",
       "      <th>married</th>\n",
       "      <th>numdep</th>\n",
       "      <th>smsa</th>\n",
       "      <th>northcen</th>\n",
       "      <th>...</th>\n",
       "      <th>trcommpu</th>\n",
       "      <th>trade</th>\n",
       "      <th>services</th>\n",
       "      <th>profserv</th>\n",
       "      <th>profocc</th>\n",
       "      <th>clerocc</th>\n",
       "      <th>servocc</th>\n",
       "      <th>lwage</th>\n",
       "      <th>expersq</th>\n",
       "      <th>tenursq</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>521</th>\n",
       "      <td>15.00</td>\n",
       "      <td>16</td>\n",
       "      <td>14</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.708050</td>\n",
       "      <td>196</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>522</th>\n",
       "      <td>2.27</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.819780</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>523</th>\n",
       "      <td>4.67</td>\n",
       "      <td>15</td>\n",
       "      <td>13</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.541159</td>\n",
       "      <td>169</td>\n",
       "      <td>324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>524</th>\n",
       "      <td>11.56</td>\n",
       "      <td>16</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.447551</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>525</th>\n",
       "      <td>3.50</td>\n",
       "      <td>14</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.252763</td>\n",
       "      <td>25</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      wage  educ  exper  tenure  nonwhite  female  married  numdep  smsa  \\\n",
       "521  15.00    16     14       2         0       1        1       2     0   \n",
       "522   2.27    10      2       0         0       1        0       3     0   \n",
       "523   4.67    15     13      18         0       0        1       3     0   \n",
       "524  11.56    16      5       1         0       0        1       0     0   \n",
       "525   3.50    14      5       4         1       1        0       2     0   \n",
       "\n",
       "     northcen  ...  trcommpu  trade  services  profserv  profocc  clerocc  \\\n",
       "521         0  ...         0      0         0         1        1        0   \n",
       "522         0  ...         0      1         0         0        1        0   \n",
       "523         0  ...         0      0         0         0        1        0   \n",
       "524         0  ...         0      0         0         0        0        0   \n",
       "525         0  ...         0      0         0         1        0        1   \n",
       "\n",
       "     servocc     lwage  expersq  tenursq  \n",
       "521        0  2.708050      196        4  \n",
       "522        0  0.819780        4        0  \n",
       "523        0  1.541159      169      324  \n",
       "524        0  2.447551       25        1  \n",
       "525        0  1.252763       25       16  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wage1.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e89d27a",
   "metadata": {},
   "source": [
    "## 7.3. Importação de dados\n",
    "\n",
    "Para **Data Frames**, a leitura, manipulação e exportação de diversos formatos de dados (CSV, XLS, XLSX, TXT, DTA, entre outros) pode ser feita utilizando o **pandas**. \n",
    "\n",
    "Inicialmente, você precisará importar o pandas com o seguinte comando:  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "23a8b409",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "879a860c",
   "metadata": {},
   "source": [
    "### 7.3.1. Arquivos CSV\n",
    "\n",
    "Como exemplo, vamos usar a **Base de Dados do Comércio Exterior Brasileiro (Comex Stat)** disponibilizada pelo Governo Federal (Ministério da Economia) em [www.gov.br](https://www.gov.br/produtividade-e-comercio-exterior/pt-br/assuntos/comercio-exterior/estatisticas/base-de-dados-bruta). Você pode baixar os dados e salvar no seu diretório de trabalho. \n",
    "\n",
    "Nos exemplos abaixo, vamos usar a base de dados de Exportações detalhada por NCM (Nomenclatura Comum do Mercosul) para o ano 2019.\n",
    "\n",
    "<div class=\"alert alert-info\"> \n",
    "    \n",
    "**Observação:**\n",
    "\n",
    "Os dados também estão disponíveis [**AQUI**](https://nedurcode.com/python/EXP_2019.rar) em zip. Extraia os dados no seu diretório de trabalho!\n",
    "    \n",
    "</div>\n",
    "\n",
    "O arquivo CSV disponibilizado no Comex Stat utiliza separador ponto e vírgula (;) e apresenta o seguinte detalhamento:\n",
    "\n",
    "* Ano\n",
    "* Mês\n",
    "* Código NCM\n",
    "* Código da unidade estatística\n",
    "* Código de país de destino/origem do produto\n",
    "* Código da UF de origem/destino do produto\n",
    "* Código da via de transporte\n",
    "* Código da URF de embarque/desembarque\n",
    "* Quantidade estatística\n",
    "* Quilograma líquido\n",
    "* Valor dólar FOB (US$)\n",
    "\n",
    "Para importar os dados, podemos usar a função `pd.read_csv()` do pacote **pandas**. Para tal, vamos criar um objeto **dexp** (dados de exportações) da seguinte forma:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f10470d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "dexp = pd.read_csv(\"EXP_2019.csv\", sep=';')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0140e270",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CO_ANO</th>\n",
       "      <th>CO_MES</th>\n",
       "      <th>CO_NCM</th>\n",
       "      <th>CO_UNID</th>\n",
       "      <th>CO_PAIS</th>\n",
       "      <th>SG_UF_NCM</th>\n",
       "      <th>CO_VIA</th>\n",
       "      <th>CO_URF</th>\n",
       "      <th>QT_ESTAT</th>\n",
       "      <th>KG_LIQUIDO</th>\n",
       "      <th>VL_FOB</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019</td>\n",
       "      <td>12</td>\n",
       "      <td>70193900</td>\n",
       "      <td>10</td>\n",
       "      <td>97</td>\n",
       "      <td>SP</td>\n",
       "      <td>7</td>\n",
       "      <td>147600</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019</td>\n",
       "      <td>12</td>\n",
       "      <td>85444200</td>\n",
       "      <td>10</td>\n",
       "      <td>63</td>\n",
       "      <td>SP</td>\n",
       "      <td>4</td>\n",
       "      <td>817700</td>\n",
       "      <td>99</td>\n",
       "      <td>96</td>\n",
       "      <td>9299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019</td>\n",
       "      <td>12</td>\n",
       "      <td>84099111</td>\n",
       "      <td>11</td>\n",
       "      <td>493</td>\n",
       "      <td>SP</td>\n",
       "      <td>4</td>\n",
       "      <td>817600</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019</td>\n",
       "      <td>12</td>\n",
       "      <td>87087090</td>\n",
       "      <td>11</td>\n",
       "      <td>493</td>\n",
       "      <td>SP</td>\n",
       "      <td>4</td>\n",
       "      <td>817700</td>\n",
       "      <td>15</td>\n",
       "      <td>231</td>\n",
       "      <td>908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019</td>\n",
       "      <td>12</td>\n",
       "      <td>32041990</td>\n",
       "      <td>10</td>\n",
       "      <td>586</td>\n",
       "      <td>SC</td>\n",
       "      <td>7</td>\n",
       "      <td>147800</td>\n",
       "      <td>1200</td>\n",
       "      <td>1200</td>\n",
       "      <td>26494</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   CO_ANO  CO_MES    CO_NCM  CO_UNID  CO_PAIS SG_UF_NCM  CO_VIA  CO_URF  \\\n",
       "0    2019      12  70193900       10       97        SP       7  147600   \n",
       "1    2019      12  85444200       10       63        SP       4  817700   \n",
       "2    2019      12  84099111       11      493        SP       4  817600   \n",
       "3    2019      12  87087090       11      493        SP       4  817700   \n",
       "4    2019      12  32041990       10      586        SC       7  147800   \n",
       "\n",
       "   QT_ESTAT  KG_LIQUIDO  VL_FOB  \n",
       "0         0           0      24  \n",
       "1        99          96    9299  \n",
       "2         2           2      63  \n",
       "3        15         231     908  \n",
       "4      1200        1200   26494  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dexp.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6877ab4a",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-info\"> \n",
    "    \n",
    "**Lembrete:**\n",
    "    \n",
    "Para verificar os argumentos da função, basta usar o help: \n",
    "    ```\n",
    "    help(pd.read_csv)\n",
    "    ```\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f40843f2",
   "metadata": {},
   "source": [
    "Para verificar o tamanho da base de dados podemos utilizar o método `shape`: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "149c71d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1393174, 11)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dexp.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96dbf8d0",
   "metadata": {},
   "source": [
    "Os dados contam com 1.416.884 linhas e 11 colunas.\n",
    "\n",
    "<div class=\"alert alert-warning\">\n",
    "\n",
    "**Atenção:** \n",
    "\n",
    "Vamos trabalhar com essa base de dados também na Seção 7.4 - Manipulação de dados. \n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ae6603b",
   "metadata": {},
   "source": [
    "### 7.3.2. Arquivos XLS e XLSX\n",
    "\n",
    "Assim como o caso do CSV, vamos usar o **pandas** para ler o arquivo em *Excel*. \n",
    "\n",
    "Como exemplo, faça o *download* do arquivo EXP2019_ComexStat [**AQUI**](https://nedurcode.com/python/EXP2019_ComexStat.xlsx).\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**Observação:** \n",
    "    \n",
    "Após fazer o *download*, salve o arquivo XLSX no seu diretório de trabalho.\n",
    "\n",
    "</div>\n",
    "\n",
    "Para importar os dados, podemos usar a função `pd.read_excel`. Para tal, especifique um objeto **dados** com:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "7eeb3ed7",
   "metadata": {},
   "outputs": [],
   "source": [
    "dados = pd.read_excel(\"EXP2019_ComexStat.xlsx\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c8ebebb",
   "metadata": {},
   "source": [
    "Novamente, podemos verificar a base, digitando seu nome: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "7fc54434",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ano</th>\n",
       "      <th>uf</th>\n",
       "      <th>exp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019</td>\n",
       "      <td>AC</td>\n",
       "      <td>0.032853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019</td>\n",
       "      <td>AL</td>\n",
       "      <td>0.319089</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019</td>\n",
       "      <td>AM</td>\n",
       "      <td>0.731092</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019</td>\n",
       "      <td>AP</td>\n",
       "      <td>0.261368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019</td>\n",
       "      <td>BA</td>\n",
       "      <td>8.168158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2019</td>\n",
       "      <td>CE</td>\n",
       "      <td>2.275188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2019</td>\n",
       "      <td>DF</td>\n",
       "      <td>0.160701</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2019</td>\n",
       "      <td>ES</td>\n",
       "      <td>8.800322</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2019</td>\n",
       "      <td>GO</td>\n",
       "      <td>7.133398</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2019</td>\n",
       "      <td>MA</td>\n",
       "      <td>3.543623</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2019</td>\n",
       "      <td>MG</td>\n",
       "      <td>25.138579</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2019</td>\n",
       "      <td>MS</td>\n",
       "      <td>5.243446</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2019</td>\n",
       "      <td>MT</td>\n",
       "      <td>17.206104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2019</td>\n",
       "      <td>ND</td>\n",
       "      <td>1.937193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2019</td>\n",
       "      <td>PA</td>\n",
       "      <td>17.841239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2019</td>\n",
       "      <td>PB</td>\n",
       "      <td>0.126299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2019</td>\n",
       "      <td>PE</td>\n",
       "      <td>1.466347</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2019</td>\n",
       "      <td>PI</td>\n",
       "      <td>0.542833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>2019</td>\n",
       "      <td>PR</td>\n",
       "      <td>16.454197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2019</td>\n",
       "      <td>RJ</td>\n",
       "      <td>28.634459</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2019</td>\n",
       "      <td>RN</td>\n",
       "      <td>0.394853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>2019</td>\n",
       "      <td>RO</td>\n",
       "      <td>1.303910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>2019</td>\n",
       "      <td>RR</td>\n",
       "      <td>0.157707</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>2019</td>\n",
       "      <td>RS</td>\n",
       "      <td>18.545065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>2019</td>\n",
       "      <td>SC</td>\n",
       "      <td>8.951839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>2019</td>\n",
       "      <td>SE</td>\n",
       "      <td>0.050561</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>2019</td>\n",
       "      <td>SP</td>\n",
       "      <td>48.852560</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>2019</td>\n",
       "      <td>TO</td>\n",
       "      <td>1.110499</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     ano  uf        exp\n",
       "0   2019  AC   0.032853\n",
       "1   2019  AL   0.319089\n",
       "2   2019  AM   0.731092\n",
       "3   2019  AP   0.261368\n",
       "4   2019  BA   8.168158\n",
       "5   2019  CE   2.275188\n",
       "6   2019  DF   0.160701\n",
       "7   2019  ES   8.800322\n",
       "8   2019  GO   7.133398\n",
       "9   2019  MA   3.543623\n",
       "10  2019  MG  25.138579\n",
       "11  2019  MS   5.243446\n",
       "12  2019  MT  17.206104\n",
       "13  2019  ND   1.937193\n",
       "14  2019  PA  17.841239\n",
       "15  2019  PB   0.126299\n",
       "16  2019  PE   1.466347\n",
       "17  2019  PI   0.542833\n",
       "18  2019  PR  16.454197\n",
       "19  2019  RJ  28.634459\n",
       "20  2019  RN   0.394853\n",
       "21  2019  RO   1.303910\n",
       "22  2019  RR   0.157707\n",
       "23  2019  RS  18.545065\n",
       "24  2019  SC   8.951839\n",
       "25  2019  SE   0.050561\n",
       "26  2019  SP  48.852560\n",
       "27  2019  TO   1.110499"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dados"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e249d134",
   "metadata": {},
   "source": [
    "Ou, verificar o tamanho, com o atributo `shape`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "70cc4b1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(28, 3)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dados.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8d04382",
   "metadata": {},
   "source": [
    "Na próxima seção, faremos alterações nessa base de dados. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f0e5e7d",
   "metadata": {},
   "source": [
    "## 7.4. Manipulação de dados\n",
    "\n",
    "Conforme destacado acima, a base de dados de exportações conta com muitas observações e variáveis. Vamos usar o **pandas** para manipular os dados, como por exemplo, selecionar, criar e renomear variáveis, filtrar observações, etc.\n",
    "\n",
    "Para iniciar, vamos visualizar novamente a base de dados dexp da seção anterior (se você está no mesmo notebook e já importou os dodos, não é necessário importar novamente). \n",
    "\n",
    "Observe os nomes das colunas (variáveis)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "9f5d6a6a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CO_ANO</th>\n",
       "      <th>CO_MES</th>\n",
       "      <th>CO_NCM</th>\n",
       "      <th>CO_UNID</th>\n",
       "      <th>CO_PAIS</th>\n",
       "      <th>SG_UF_NCM</th>\n",
       "      <th>CO_VIA</th>\n",
       "      <th>CO_URF</th>\n",
       "      <th>QT_ESTAT</th>\n",
       "      <th>KG_LIQUIDO</th>\n",
       "      <th>VL_FOB</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019</td>\n",
       "      <td>12</td>\n",
       "      <td>70193900</td>\n",
       "      <td>10</td>\n",
       "      <td>97</td>\n",
       "      <td>SP</td>\n",
       "      <td>7</td>\n",
       "      <td>147600</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019</td>\n",
       "      <td>12</td>\n",
       "      <td>85444200</td>\n",
       "      <td>10</td>\n",
       "      <td>63</td>\n",
       "      <td>SP</td>\n",
       "      <td>4</td>\n",
       "      <td>817700</td>\n",
       "      <td>99</td>\n",
       "      <td>96</td>\n",
       "      <td>9299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019</td>\n",
       "      <td>12</td>\n",
       "      <td>84099111</td>\n",
       "      <td>11</td>\n",
       "      <td>493</td>\n",
       "      <td>SP</td>\n",
       "      <td>4</td>\n",
       "      <td>817600</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019</td>\n",
       "      <td>12</td>\n",
       "      <td>87087090</td>\n",
       "      <td>11</td>\n",
       "      <td>493</td>\n",
       "      <td>SP</td>\n",
       "      <td>4</td>\n",
       "      <td>817700</td>\n",
       "      <td>15</td>\n",
       "      <td>231</td>\n",
       "      <td>908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019</td>\n",
       "      <td>12</td>\n",
       "      <td>32041990</td>\n",
       "      <td>10</td>\n",
       "      <td>586</td>\n",
       "      <td>SC</td>\n",
       "      <td>7</td>\n",
       "      <td>147800</td>\n",
       "      <td>1200</td>\n",
       "      <td>1200</td>\n",
       "      <td>26494</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1393169</th>\n",
       "      <td>2019</td>\n",
       "      <td>10</td>\n",
       "      <td>65050019</td>\n",
       "      <td>10</td>\n",
       "      <td>589</td>\n",
       "      <td>SP</td>\n",
       "      <td>4</td>\n",
       "      <td>817700</td>\n",
       "      <td>300</td>\n",
       "      <td>300</td>\n",
       "      <td>861</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1393170</th>\n",
       "      <td>2019</td>\n",
       "      <td>10</td>\n",
       "      <td>20059900</td>\n",
       "      <td>10</td>\n",
       "      <td>815</td>\n",
       "      <td>RS</td>\n",
       "      <td>1</td>\n",
       "      <td>927800</td>\n",
       "      <td>40210</td>\n",
       "      <td>40210</td>\n",
       "      <td>29975</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1393171</th>\n",
       "      <td>2019</td>\n",
       "      <td>10</td>\n",
       "      <td>40093100</td>\n",
       "      <td>10</td>\n",
       "      <td>161</td>\n",
       "      <td>SP</td>\n",
       "      <td>4</td>\n",
       "      <td>817700</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1393172</th>\n",
       "      <td>2019</td>\n",
       "      <td>10</td>\n",
       "      <td>7108000</td>\n",
       "      <td>10</td>\n",
       "      <td>573</td>\n",
       "      <td>ES</td>\n",
       "      <td>1</td>\n",
       "      <td>727600</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1393173</th>\n",
       "      <td>2019</td>\n",
       "      <td>10</td>\n",
       "      <td>94036000</td>\n",
       "      <td>11</td>\n",
       "      <td>87</td>\n",
       "      <td>SC</td>\n",
       "      <td>4</td>\n",
       "      <td>817700</td>\n",
       "      <td>10</td>\n",
       "      <td>405</td>\n",
       "      <td>290</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1393174 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         CO_ANO  CO_MES    CO_NCM  CO_UNID  CO_PAIS SG_UF_NCM  CO_VIA  CO_URF  \\\n",
       "0          2019      12  70193900       10       97        SP       7  147600   \n",
       "1          2019      12  85444200       10       63        SP       4  817700   \n",
       "2          2019      12  84099111       11      493        SP       4  817600   \n",
       "3          2019      12  87087090       11      493        SP       4  817700   \n",
       "4          2019      12  32041990       10      586        SC       7  147800   \n",
       "...         ...     ...       ...      ...      ...       ...     ...     ...   \n",
       "1393169    2019      10  65050019       10      589        SP       4  817700   \n",
       "1393170    2019      10  20059900       10      815        RS       1  927800   \n",
       "1393171    2019      10  40093100       10      161        SP       4  817700   \n",
       "1393172    2019      10   7108000       10      573        ES       1  727600   \n",
       "1393173    2019      10  94036000       11       87        SC       4  817700   \n",
       "\n",
       "         QT_ESTAT  KG_LIQUIDO  VL_FOB  \n",
       "0               0           0      24  \n",
       "1              99          96    9299  \n",
       "2               2           2      63  \n",
       "3              15         231     908  \n",
       "4            1200        1200   26494  \n",
       "...           ...         ...     ...  \n",
       "1393169       300         300     861  \n",
       "1393170     40210       40210   29975  \n",
       "1393171         0           0       2  \n",
       "1393172        13          13      46  \n",
       "1393173        10         405     290  \n",
       "\n",
       "[1393174 rows x 11 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dexp"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c51662f2",
   "metadata": {},
   "source": [
    "Alternativamente, confira os nomes das colunas com o atributo colunms:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "2f796167",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['CO_ANO', 'CO_MES', 'CO_NCM', 'CO_UNID', 'CO_PAIS', 'SG_UF_NCM',\n",
       "       'CO_VIA', 'CO_URF', 'QT_ESTAT', 'KG_LIQUIDO', 'VL_FOB'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dexp.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79c58049",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-info\"> \n",
    "    \n",
    "**Observação:**\n",
    "\n",
    "[AQUI](http://nedurcode.com/python/Pandas_Basics_Cheat_Sheet_datacamp.pdf), você encontra um guia rápido do **pandas**, escrito pelo pessoal do *Data Camp*. \n",
    "    \n",
    "</div>\n",
    "\n",
    "Vejamos algumas manipulações muito utilizadas em bancos de dados: \n",
    "    \n",
    "### 7.4.1. Selecionar variáveis\n",
    "\n",
    "Para selecionar apenas algumas variáveis, podemos criar um novo objeto **dexp_mod** especificado a partir da seleção de algumas variáveis da base original, como Ano (\"CO_ANO\"), Mês (\"CO_MES\"), UF (\"SG_UF_NCM\") e Valor FOB (\"VL_FOB\"):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "8c324cfa",
   "metadata": {},
   "outputs": [],
   "source": [
    "dexp_mod = dexp[[\"CO_ANO\", \"CO_MES\", \"SG_UF_NCM\", \"VL_FOB\"]]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "421bff85",
   "metadata": {},
   "source": [
    "Para verificar a nova base, podemos utilizar o método `head()`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "21cc8ae7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CO_ANO</th>\n",
       "      <th>CO_MES</th>\n",
       "      <th>SG_UF_NCM</th>\n",
       "      <th>VL_FOB</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019</td>\n",
       "      <td>12</td>\n",
       "      <td>SP</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019</td>\n",
       "      <td>12</td>\n",
       "      <td>SP</td>\n",
       "      <td>9299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019</td>\n",
       "      <td>12</td>\n",
       "      <td>SP</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019</td>\n",
       "      <td>12</td>\n",
       "      <td>SP</td>\n",
       "      <td>908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019</td>\n",
       "      <td>12</td>\n",
       "      <td>SC</td>\n",
       "      <td>26494</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   CO_ANO  CO_MES SG_UF_NCM  VL_FOB\n",
       "0    2019      12        SP      24\n",
       "1    2019      12        SP    9299\n",
       "2    2019      12        SP      63\n",
       "3    2019      12        SP     908\n",
       "4    2019      12        SC   26494"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dexp_mod.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15b1af9c",
   "metadata": {},
   "source": [
    "### 7.4.2. Renomear variáveis\n",
    "\n",
    "Para renomear as variáveis, podemos usar o método `rename()`.\n",
    "\n",
    "Por exemplo, para renomear \"CO_ANO\" como \"ano\", \"CO_MES\" como \"mes\", \"SG_UF_NCM\" como \"uf\" e \"VL_FOB\" como \"exp\" na base de dados **dexp_mod**, o seguinte código pode ser usado:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "06a81737",
   "metadata": {},
   "outputs": [],
   "source": [
    "dexp_mod = dexp_mod.rename(\n",
    "    columns={\n",
    "        \"CO_ANO\":\"ano\",\n",
    "        \"CO_MES\":\"mes\",\n",
    "        \"SG_UF_NCM\":\"uf\",\n",
    "        \"VL_FOB\":\"exp\"\n",
    "    }\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dbc42037",
   "metadata": {},
   "source": [
    "Observe que a nova base de dados tem o mesmo nome que a anterior. Se você abrir o objeto **dexp_mod**, as variáveis estarão com os novos nomes.\n",
    "\n",
    "<div class=\"alert alert-info\"> \n",
    "    \n",
    "**Observação:**\n",
    "\n",
    "O que está dentro dos colchetes é um **dicionário**, o que também é uma estrutura de dados em Python. Basicamente, um dicionário é uma correspondência. Para mais informações acesse: https://docs.python.org/3/tutorial/datastructures.html#dictionaries\n",
    "\n",
    "</div > \n",
    "\n",
    "### 7.4.3. Modificar dados\n",
    "\n",
    "Para criar o log de uma variável, precisamos utilizar o pacote **numpy** que será importado com a abreviação **np**: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "949fd4e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee8d5098",
   "metadata": {},
   "source": [
    "Para criar o log de uma variável, precisamos utilizar a função `np.log()` do numpy, diretamente sobre a coluna selecionada. Por exemplo, para obtermos o log do valor das exportações e salvá-la com o nome **log_exp**, podemos utilizar o seguinte código: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "83f6f3bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\kenia\\anaconda3\\lib\\site-packages\\pandas\\core\\arraylike.py:397: RuntimeWarning: divide by zero encountered in log\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n"
     ]
    }
   ],
   "source": [
    "dexp_mod[\"log_exp\"] = np.log(dexp_mod[\"exp\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c14c5a0",
   "metadata": {},
   "source": [
    "Observe que a mensagem de **warning** indica que existem logs de zero, o que resulta em um número indefinido. Você pode organizar o banco de dados por exportações, e verificar que quando as exportações são zero, o resultado é *-inf*:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "ce1e0b7e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ano</th>\n",
       "      <th>mes</th>\n",
       "      <th>uf</th>\n",
       "      <th>exp</th>\n",
       "      <th>log_exp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1054934</th>\n",
       "      <td>2019</td>\n",
       "      <td>9</td>\n",
       "      <td>SP</td>\n",
       "      <td>0</td>\n",
       "      <td>-inf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890669</th>\n",
       "      <td>2019</td>\n",
       "      <td>1</td>\n",
       "      <td>SP</td>\n",
       "      <td>0</td>\n",
       "      <td>-inf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>164536</th>\n",
       "      <td>2019</td>\n",
       "      <td>4</td>\n",
       "      <td>SC</td>\n",
       "      <td>0</td>\n",
       "      <td>-inf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1140392</th>\n",
       "      <td>2019</td>\n",
       "      <td>12</td>\n",
       "      <td>PR</td>\n",
       "      <td>0</td>\n",
       "      <td>-inf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55192</th>\n",
       "      <td>2019</td>\n",
       "      <td>4</td>\n",
       "      <td>RS</td>\n",
       "      <td>0</td>\n",
       "      <td>-inf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>720860</th>\n",
       "      <td>2019</td>\n",
       "      <td>11</td>\n",
       "      <td>PA</td>\n",
       "      <td>734708540</td>\n",
       "      <td>20.414984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>879091</th>\n",
       "      <td>2019</td>\n",
       "      <td>9</td>\n",
       "      <td>PA</td>\n",
       "      <td>870210045</td>\n",
       "      <td>20.584245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>450799</th>\n",
       "      <td>2019</td>\n",
       "      <td>4</td>\n",
       "      <td>RJ</td>\n",
       "      <td>967127923</td>\n",
       "      <td>20.689841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>546053</th>\n",
       "      <td>2019</td>\n",
       "      <td>8</td>\n",
       "      <td>PA</td>\n",
       "      <td>1093983387</td>\n",
       "      <td>20.813091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1132686</th>\n",
       "      <td>2019</td>\n",
       "      <td>7</td>\n",
       "      <td>PA</td>\n",
       "      <td>1193313692</td>\n",
       "      <td>20.900000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1393174 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          ano  mes  uf         exp    log_exp\n",
       "1054934  2019    9  SP           0       -inf\n",
       "890669   2019    1  SP           0       -inf\n",
       "164536   2019    4  SC           0       -inf\n",
       "1140392  2019   12  PR           0       -inf\n",
       "55192    2019    4  RS           0       -inf\n",
       "...       ...  ...  ..         ...        ...\n",
       "720860   2019   11  PA   734708540  20.414984\n",
       "879091   2019    9  PA   870210045  20.584245\n",
       "450799   2019    4  RJ   967127923  20.689841\n",
       "546053   2019    8  PA  1093983387  20.813091\n",
       "1132686  2019    7  PA  1193313692  20.900000\n",
       "\n",
       "[1393174 rows x 5 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dexp_mod.sort_values(\"exp\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c22a5b47",
   "metadata": {},
   "source": [
    "Podemos também transformar o valor US$ FOB das exportações em bilhões com a divisão:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "a1b7dbe1",
   "metadata": {},
   "outputs": [],
   "source": [
    "dexp_mod[\"exp\"] = (dexp_mod[\"exp\"]/1000000000)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bcc13095",
   "metadata": {},
   "source": [
    "Observe que nesse caso, estamos substituindo a variável **exp** pelo valor em bilhões:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "89b52f2a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ano</th>\n",
       "      <th>mes</th>\n",
       "      <th>uf</th>\n",
       "      <th>exp</th>\n",
       "      <th>log_exp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019</td>\n",
       "      <td>12</td>\n",
       "      <td>SP</td>\n",
       "      <td>2.400000e-08</td>\n",
       "      <td>3.178054</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019</td>\n",
       "      <td>12</td>\n",
       "      <td>SP</td>\n",
       "      <td>9.299000e-06</td>\n",
       "      <td>9.137662</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019</td>\n",
       "      <td>12</td>\n",
       "      <td>SP</td>\n",
       "      <td>6.300000e-08</td>\n",
       "      <td>4.143135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019</td>\n",
       "      <td>12</td>\n",
       "      <td>SP</td>\n",
       "      <td>9.080000e-07</td>\n",
       "      <td>6.811244</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019</td>\n",
       "      <td>12</td>\n",
       "      <td>SC</td>\n",
       "      <td>2.649400e-05</td>\n",
       "      <td>10.184674</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    ano  mes  uf           exp    log_exp\n",
       "0  2019   12  SP  2.400000e-08   3.178054\n",
       "1  2019   12  SP  9.299000e-06   9.137662\n",
       "2  2019   12  SP  6.300000e-08   4.143135\n",
       "3  2019   12  SP  9.080000e-07   6.811244\n",
       "4  2019   12  SC  2.649400e-05  10.184674"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dexp_mod.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f069b543",
   "metadata": {},
   "source": [
    "### 7.4.4. Agrupar e agregar dados\n",
    "\n",
    "Para agrupar a base de dados, podemos utilizar o método `groupby()` do **pandas**, combinado com outras funções. Por exemplo, podemos obter a soma da variável de exportações, agrupada por *ano* e *UF*: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "ef2936ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ano</th>\n",
       "      <th>uf</th>\n",
       "      <th>exp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019</td>\n",
       "      <td>AC</td>\n",
       "      <td>0.032853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019</td>\n",
       "      <td>AL</td>\n",
       "      <td>0.319089</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019</td>\n",
       "      <td>AM</td>\n",
       "      <td>0.731093</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019</td>\n",
       "      <td>AP</td>\n",
       "      <td>0.261368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019</td>\n",
       "      <td>BA</td>\n",
       "      <td>8.162484</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2019</td>\n",
       "      <td>CE</td>\n",
       "      <td>2.275193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2019</td>\n",
       "      <td>DF</td>\n",
       "      <td>0.160701</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2019</td>\n",
       "      <td>ES</td>\n",
       "      <td>7.105386</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2019</td>\n",
       "      <td>GO</td>\n",
       "      <td>7.133399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2019</td>\n",
       "      <td>MA</td>\n",
       "      <td>3.543623</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2019</td>\n",
       "      <td>MG</td>\n",
       "      <td>25.138590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2019</td>\n",
       "      <td>MS</td>\n",
       "      <td>5.243447</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2019</td>\n",
       "      <td>MT</td>\n",
       "      <td>17.206105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2019</td>\n",
       "      <td>ND</td>\n",
       "      <td>1.937193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2019</td>\n",
       "      <td>PA</td>\n",
       "      <td>17.841241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2019</td>\n",
       "      <td>PB</td>\n",
       "      <td>0.126300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2019</td>\n",
       "      <td>PE</td>\n",
       "      <td>1.466346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2019</td>\n",
       "      <td>PI</td>\n",
       "      <td>0.542833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>2019</td>\n",
       "      <td>PR</td>\n",
       "      <td>16.403308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2019</td>\n",
       "      <td>RJ</td>\n",
       "      <td>27.624210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2019</td>\n",
       "      <td>RN</td>\n",
       "      <td>0.394854</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>2019</td>\n",
       "      <td>RO</td>\n",
       "      <td>1.303910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>2019</td>\n",
       "      <td>RR</td>\n",
       "      <td>0.157707</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>2019</td>\n",
       "      <td>RS</td>\n",
       "      <td>17.256958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>2019</td>\n",
       "      <td>SC</td>\n",
       "      <td>8.951856</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>2019</td>\n",
       "      <td>SE</td>\n",
       "      <td>0.050562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>2019</td>\n",
       "      <td>SP</td>\n",
       "      <td>48.645702</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>2019</td>\n",
       "      <td>TO</td>\n",
       "      <td>1.110498</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     ano  uf        exp\n",
       "0   2019  AC   0.032853\n",
       "1   2019  AL   0.319089\n",
       "2   2019  AM   0.731093\n",
       "3   2019  AP   0.261368\n",
       "4   2019  BA   8.162484\n",
       "5   2019  CE   2.275193\n",
       "6   2019  DF   0.160701\n",
       "7   2019  ES   7.105386\n",
       "8   2019  GO   7.133399\n",
       "9   2019  MA   3.543623\n",
       "10  2019  MG  25.138590\n",
       "11  2019  MS   5.243447\n",
       "12  2019  MT  17.206105\n",
       "13  2019  ND   1.937193\n",
       "14  2019  PA  17.841241\n",
       "15  2019  PB   0.126300\n",
       "16  2019  PE   1.466346\n",
       "17  2019  PI   0.542833\n",
       "18  2019  PR  16.403308\n",
       "19  2019  RJ  27.624210\n",
       "20  2019  RN   0.394854\n",
       "21  2019  RO   1.303910\n",
       "22  2019  RR   0.157707\n",
       "23  2019  RS  17.256958\n",
       "24  2019  SC   8.951856\n",
       "25  2019  SE   0.050562\n",
       "26  2019  SP  48.645702\n",
       "27  2019  TO   1.110498"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dexp_mod.groupby([\"ano\",\"uf\"],  as_index=False)[\"exp\"].sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c28f2221",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-info\"> \n",
    "    \n",
    "**Observação:**\n",
    "\n",
    "Repare que utilizamos o argumento *as_index=False* ao usar o método *groupby*. Isso porque, quando não utilizamos esse argumento, *[\"ano\",\"uf\"]* serão considerados índices da nova série criada. Ao deixar *as_index=False*, estamos mantendo o índice como uma sequência numérica. \n",
    "    \n",
    "</div > \n",
    "\n",
    "Podemos ainda utilizar várias estatísticas ao mesmo tempo (por exemplo, soma, mínimo e máximo), utilizando o método **agg()**: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "fb826b8e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>sum</th>\n",
       "      <th>min</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ano</th>\n",
       "      <th>uf</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"28\" valign=\"top\">2019</th>\n",
       "      <th>AC</th>\n",
       "      <td>0.032853</td>\n",
       "      <td>9.000000e-09</td>\n",
       "      <td>0.000954</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AL</th>\n",
       "      <td>0.319089</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.021772</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AM</th>\n",
       "      <td>0.731093</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.013352</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AP</th>\n",
       "      <td>0.261368</td>\n",
       "      <td>1.000000e-09</td>\n",
       "      <td>0.018698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BA</th>\n",
       "      <td>8.162484</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.153340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CE</th>\n",
       "      <td>2.275193</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.113706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DF</th>\n",
       "      <td>0.160701</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.006417</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ES</th>\n",
       "      <td>7.105386</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.129798</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GO</th>\n",
       "      <td>7.133399</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.161175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MA</th>\n",
       "      <td>3.543623</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.118354</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MG</th>\n",
       "      <td>25.138590</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.304937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MS</th>\n",
       "      <td>5.243447</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.152393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MT</th>\n",
       "      <td>17.206105</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.491826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ND</th>\n",
       "      <td>1.937193</td>\n",
       "      <td>6.000000e-08</td>\n",
       "      <td>0.085973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PA</th>\n",
       "      <td>17.841241</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.193314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PB</th>\n",
       "      <td>0.126300</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.003244</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PE</th>\n",
       "      <td>1.466346</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.043024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PI</th>\n",
       "      <td>0.542833</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.056123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PR</th>\n",
       "      <td>16.403308</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.281062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RJ</th>\n",
       "      <td>27.624210</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.967128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RN</th>\n",
       "      <td>0.394854</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.025583</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RO</th>\n",
       "      <td>1.303910</td>\n",
       "      <td>7.000000e-09</td>\n",
       "      <td>0.027731</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RR</th>\n",
       "      <td>0.157707</td>\n",
       "      <td>1.000000e-09</td>\n",
       "      <td>0.012068</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RS</th>\n",
       "      <td>17.256958</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.579854</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SC</th>\n",
       "      <td>8.951856</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.065901</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SE</th>\n",
       "      <td>0.050562</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.002872</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SP</th>\n",
       "      <td>48.645702</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.259384</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TO</th>\n",
       "      <td>1.110498</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.091234</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               sum           min       max\n",
       "ano  uf                                   \n",
       "2019 AC   0.032853  9.000000e-09  0.000954\n",
       "     AL   0.319089  0.000000e+00  0.021772\n",
       "     AM   0.731093  0.000000e+00  0.013352\n",
       "     AP   0.261368  1.000000e-09  0.018698\n",
       "     BA   8.162484  0.000000e+00  0.153340\n",
       "     CE   2.275193  0.000000e+00  0.113706\n",
       "     DF   0.160701  0.000000e+00  0.006417\n",
       "     ES   7.105386  0.000000e+00  0.129798\n",
       "     GO   7.133399  0.000000e+00  0.161175\n",
       "     MA   3.543623  0.000000e+00  0.118354\n",
       "     MG  25.138590  0.000000e+00  0.304937\n",
       "     MS   5.243447  0.000000e+00  0.152393\n",
       "     MT  17.206105  0.000000e+00  0.491826\n",
       "     ND   1.937193  6.000000e-08  0.085973\n",
       "     PA  17.841241  0.000000e+00  1.193314\n",
       "     PB   0.126300  0.000000e+00  0.003244\n",
       "     PE   1.466346  0.000000e+00  0.043024\n",
       "     PI   0.542833  0.000000e+00  0.056123\n",
       "     PR  16.403308  0.000000e+00  0.281062\n",
       "     RJ  27.624210  0.000000e+00  0.967128\n",
       "     RN   0.394854  0.000000e+00  0.025583\n",
       "     RO   1.303910  7.000000e-09  0.027731\n",
       "     RR   0.157707  1.000000e-09  0.012068\n",
       "     RS  17.256958  0.000000e+00  0.579854\n",
       "     SC   8.951856  0.000000e+00  0.065901\n",
       "     SE   0.050562  0.000000e+00  0.002872\n",
       "     SP  48.645702  0.000000e+00  0.259384\n",
       "     TO   1.110498  0.000000e+00  0.091234"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dexp_mod.groupby([\"ano\",\"uf\"],  as_index=False)[\"exp\"].agg([sum, min, max])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ef4899e",
   "metadata": {},
   "source": [
    "## 7.5. Exportação de dados\n",
    "\n",
    "Podemos utilizar o **pandas** para exportar dados para diversos formatos como **CSV** e **XLSX**. \n",
    "\n",
    "Vamos retomar a base de dados modificada anteriormente, e salvar os dados somados de exportação por UF com o nome *tabela*:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "ab13ebe6",
   "metadata": {},
   "outputs": [],
   "source": [
    "tabela = dexp_mod.groupby([\"ano\",\"uf\"],  as_index=False).sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1739cf07",
   "metadata": {},
   "source": [
    "Esses dados serão salvos em CSV e XLS. \n",
    "\n",
    "### 7.5.1. **Dados em CSV**\n",
    "\n",
    "Suponha que você queira exportar a tabela com dados agregados das exportações por UF e ano. \n",
    "\n",
    "Nesse caso, podemos usar, por exemplo, a função `to_csv()` do pacote **pandas**:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "0ece8632",
   "metadata": {},
   "outputs": [],
   "source": [
    "tabela.to_csv('Exp_UF_2019v.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f6c0e7a",
   "metadata": {},
   "source": [
    "Observe que a base de dados foi salva no seu diretório de trabalho. Se você abrir o arquivo CSV, irá observar que os dados estão separados por vírgula. A função `to_csv()` utiliza vírgula (,) como separador padrão.\n",
    "\n",
    "Para mudar o separador para ponto e vírgula (;), precisamos indicar no argumento *sep* da função:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "5cf78c2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "tabela.to_csv('Exp_UF_2019pv.csv', sep=';')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b43d266",
   "metadata": {},
   "source": [
    "De forma alternativa, se quisermos salvar a tabela apenas externamente, podemos encadear os dois códigos, usando: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "ab22fd9d",
   "metadata": {},
   "outputs": [],
   "source": [
    "dexp_mod.groupby([\"ano\",\"uf\"], as_index=False).sum().to_csv('Exp_UF_2019pv.csv', sep=';')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac143b68",
   "metadata": {},
   "source": [
    "Lembre-se, você pode tirar suas dúvidas sobre as funções com a função help:\n",
    "\n",
    "    help(pd.DataFrame.to_csv)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ae4a01d",
   "metadata": {},
   "source": [
    "### 7.5.2. **Dados em XLSX**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc3292b9",
   "metadata": {},
   "source": [
    "Para exportar para excel, podmeos usar a função `to_excel()` do pacote **pandas**:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "fdf2bd46",
   "metadata": {},
   "outputs": [],
   "source": [
    "tabela.to_excel('Exp_UF_2019.xlsx',  sheet_name = \"2019\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f76bd08c",
   "metadata": {},
   "source": [
    "Observe que o argumento *sheet_name*, escreve 2019 no nome da aba do excel. Esse é um argumento opcional do método, que será muito útil principalmente quando você precisar salvar várias abas no mesmo arquivo. \n",
    "\n",
    "<div class=\"alert alert-warning\"> \n",
    "    \n",
    "**Atenção:**\n",
    "    \n",
    "O pacote **pandas** possui diversas outras opções para ler e escrever dados, que podem ser conferidas em: https://pandas.pydata.org/docs/reference/io.html. \n",
    "    \n",
    "</div > "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
